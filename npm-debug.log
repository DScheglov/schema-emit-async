0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'publish' ]
2 info using npm@3.7.3
3 info using node@v5.9.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/dmi/projects/schema-emit-async',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/dmi/.npm/schema-emit-async/0.1.0/package.tgz not in flight; packing
9 verbose correctMkdir /home/dmi/.npm correctMkdir not in flight; initializing
10 info lifecycle schema-emit-async@0.1.0~prepublish: schema-emit-async@0.1.0
11 silly lifecycle schema-emit-async@0.1.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/dmi/.npm/schema-emit-async/0.1.0/package.tgz',
12 verbose tar pack   '/home/dmi/projects/schema-emit-async' ]
13 verbose tarball /home/dmi/.npm/schema-emit-async/0.1.0/package.tgz
14 verbose folder /home/dmi/projects/schema-emit-async
15 verbose addLocalTarball adding from inside cache /home/dmi/.npm/schema-emit-async/0.1.0/package.tgz
16 verbose correctMkdir /home/dmi/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd schema-emit-async@0.1.0
18 verbose afterAdd /home/dmi/.npm/schema-emit-async/0.1.0/package/package.json not in flight; writing
19 verbose correctMkdir /home/dmi/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/dmi/.npm/schema-emit-async/0.1.0/package/package.json written
21 silly publish { name: 'schema-emit-async',
21 silly publish   version: '0.1.0',
21 silly publish   description: 'Patch for events.EventEmitter and Mongoose.Schema and Mongoose.Document that allows emit events and handle them by functions with callbacks ',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'mocha' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/DScheglov/schema-emit-async.git' },
21 silly publish   keywords:
21 silly publish    [ 'EventEmitter',
21 silly publish      'Async',
21 silly publish      'Mongoose',
21 silly publish      'Schema',
21 silly publish      'Documents',
21 silly publish      'on',
21 silly publish      'emit',
21 silly publish      'emitAsync',
21 silly publish      'onAsync' ],
21 silly publish   author: { name: 'Dmitry Scheglov', email: 'Dmitry.Scheglov@gmail.com' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/DScheglov/schema-emit-async/issues' },
21 silly publish   homepage: 'https://github.com/DScheglov/schema-emit-async#readme',
21 silly publish   devDependencies: { mocha: '^2.4.5', mongoose: '4.4.10' },
21 silly publish   dependencies: { async: '^2.0.0-rc.3' },
21 silly publish   readme: 'Patch for Events.EventEmitter, Mongoose.Document, Mongoose.Schema\r\n================\r\nThe patch adds methods to mentioned above classes that allow to emit events and handle them by functions with callback.\r\n\r\nThe original **EventEmitter.emit** also supports handling by functions with callback, but the key feature of method **EventEmitter.emitAsync** added by this patch is that callback function specified in the method call will be called after all handlers processed.\r\n\r\n--------------------\r\nInstallation\r\n====================\r\n```shell\r\nnpm install shema-emit-async\r\n```\r\n\r\nDevelopment and testing\r\n====================\r\n```shell\r\ngit clone https://github.com/DScheglov/schema-emit-async.git\r\nnpm install\r\nnpm test\r\n```\r\n--------------------\r\nDescription\r\n==================\r\nThe patch adds the following methods:\r\n\r\n1. [**events.EventEmitter.prototype.emitAsync**](#EE.eA) - emits event and calls callback after all handlers processed\r\n\r\n2. [**mongoose.Document.prototype.emitAsync**](#mD.eA) - duck-style inheritance of EventEmitter.eventAsync -- allows to emit event and pass one or more params to the handlers\r\n\r\n3. [**mongoose.Schema.prototype.onAsync**](#mS.oA) -- adds handler as function with callback that binds to the Documents emitted the event\r\n\r\n-----------\r\n### EventEmitter#emitAsync(event, ..., callback) <a name="EE.eA"></a>\r\n\r\nEmits the event specified by `event` parameter and calls the `callback` function after all handlers processed\r\n\r\n**Parameters**\r\n\r\n**event**: `String`, The event to be emitted\r\n\r\n**...**: `any type`, zero or any number of parameters that will be passed\r\nto the event handlers.\r\n\r\n**callback**: `Function`, The function which is called when all handlers have\r\nfinished or some handler have fired the exception\r\n\r\n**Returns**: `Boolean`, Returns true if there is at least one handler,\r\notherwise returns false\r\n\r\n#### callback(err, results)\r\n\r\n**Parameters**\r\n\r\n**err**: `Error|*`, the exception raised in one of handlers. The handler raised the exception stops the further event handling. If no exception was thrown the **err** is `null` or `undefined`.\r\n\r\n**results**: `Array`, the array of results passed by each handler to the `next` function\r\n\r\n#### Example:\r\n```javascript\r\nrequire(\'schema-emit-async\');\r\nvar EventEmitter = require(\'events\').EventEmitter;\r\n\r\nvar emitter = new EventEmitter();\r\n\r\nemitter.on(\'some-event\', function(next) {\r\n  console.log(\'Hello world!!!\');\r\n  next(null, \'The first handler processed.\');\r\n});\r\n....\r\n....\r\nemitter.on(\'some-event\', function(next) {\r\n  console.log(\'Hello world again!!!\');\r\n  next(null, \'The second handler processed.\');\r\n});\r\n....\r\n....\r\nemitter.emitAsync(\'some-event\', function (err, results) {\r\n  console.log(\'Error: %s\', err&&err.message || \'no errors\');\r\n  console.log(\'Results: "%s"\', results.join(\'" & "\'));\r\n});\r\n\r\n```\r\nOutput:\r\n```shell\r\nHello world!!!\r\nHello world again!!!\r\nError: no errors\r\nResults: "The first handler processed." & "The second handler processed."\r\n```\r\n\r\nInstead of the Example above the code uses the original **EventEmitter.emit**:\r\n```javascript\r\nvar EventEmitter = require(\'events\').EventEmitter;\r\n\r\nvar emitter = new EventEmitter();\r\n\r\nemitter.on(\'some-event\', function(next) {\r\n  console.log(\'Hello world!!!\');\r\n  next(null, \'The first handler processed.\');\r\n});\r\n....\r\n....\r\nemitter.on(\'some-event\', function(next) {\r\n  console.log(\'Hello world again!!!\');\r\n  next(null, \'The second handler processed.\');\r\n});\r\n....\r\n....\r\nemitter.emit(\'some-event\', function (err, results) {\r\n  console.log(\'Error: %s\', err&&err.message || \'no errors\');\r\n  console.log(\'Results: "%s"\', results);\r\n});\r\n\r\n```\r\nproduces the following output:\r\n\r\n```shell\r\nHello world!!!\r\nError: no errors\r\nResults: "The first handler processed."\r\nHello world again!!!\r\nError: no errors\r\nResults: "The second handler processed."\r\n```\r\n----------------------\r\n### Document#emitAsync() <a name="mD.eA"></a>\r\n\r\nDocument.prototype.emitAsync - the wrapper method of EventEmitter that\r\nis attached to the mongoose.Document\r\n\r\nsee: [EventEmitter#emitAsync](#EE.eA)\r\n\r\n------------------\r\n### Schema#onAsync(event, fn) <a name="mS.oA"></a>\r\n\r\nSchema.prototype.onAsync - adds the asynchronious handler for event\r\n\r\n**Parameters**\r\n\r\n**event**: `string`, event that should be handled\r\n\r\n**fn**: `function`, the handler of the event\r\n\r\n**Returns**: `mongoose.Schema`, the Schema\r\n',
21 silly publish   readmeFilename: 'readme.md',
21 silly publish   gitHead: '5c75125bda80dd75bc92d1cc9a32cd8377038701',
21 silly publish   _id: 'schema-emit-async@0.1.0',
21 silly publish   _shasum: '6a66e653dd47f48a4e1d7162bc8a9ea74bd8d5ed',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name schema-emit-async
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry uri https://registry.npmjs.org/schema-emit-async
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /home/dmi/.npm/schema-emit-async/0.1.0/package.tgz
29 verbose request uri https://registry.npmjs.org/schema-emit-async
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 8:57:00 PM
32 verbose request using bearer token for auth
33 verbose request id 31b5fdffd186dd3d
34 http request PUT https://registry.npmjs.org/schema-emit-async
35 http 403 https://registry.npmjs.org/schema-emit-async
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '95',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Fri, 15 Apr 2016 17:57:01 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-fra1235-FRA',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1460743020.844063,VS0,VE1108',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /home/dmi/.npm/registry.npmjs.org/schema-emit-async on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 0.1.0." : schema-emit-async
39 verbose stack     at makeError (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:199:22)
39 verbose stack     at emitTwo (events.js:100:13)
39 verbose stack     at Request.emit (events.js:185:7)
39 verbose stack     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1036:10)
39 verbose stack     at emitOne (events.js:95:20)
39 verbose stack     at Request.emit (events.js:182:7)
39 verbose stack     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:963:12)
40 verbose statusCode 403
41 verbose pkgid schema-emit-async
42 verbose cwd /home/dmi/projects/schema-emit-async
43 error Linux 3.19.0-25-generic
44 error argv "/usr/bin/nodejs" "/usr/bin/npm" "publish"
45 error node v5.9.1
46 error npm  v3.7.3
47 error code E403
48 error "You cannot publish over the previously published version 0.1.0." : schema-emit-async
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
